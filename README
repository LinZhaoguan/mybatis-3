mybatis源码中文注释版

1.兵马未动，日志先行
org.apache.ibatis.logging
org.apache.ibatis.logging.commons
org.apache.ibatis.logging.jdbc
org.apache.ibatis.logging.jdk14
org.apache.ibatis.logging.log4j
org.apache.ibatis.logging.log4j2
org.apache.ibatis.logging.nologging
org.apache.ibatis.logging.slf4j
org.apache.ibatis.logging.stdout

2.异常
org.apache.ibatis.exceptions

3.缓存
org.apache.ibatis.cache
org.apache.ibatis.cache.decorators
org.apache.ibatis.cache.impl

4.解析
org.apache.ibatis.parsing
xml解析，${} 格式的字符串解析
源码分析可以参考http://www.cnblogs.com/sunzhenchao/p/3161093.html

5.类型处理器
org.apache.ibatis.type
实现java和jdbc中的类型之间转换
源码分析可以参考http://www.cnblogs.com/sunzhenchao/archive/2013/04/09/3009431.html

6.IO
org.apache.ibatis.io
通过类加载器在jar包中寻找一个package下满足条件(比如某个接口的子类)的所有类

7.反射
org.apache.ibatis.reflection
org.apache.ibatis.reflection.factory
org.apache.ibatis.reflection.invoker
org.apache.ibatis.reflection.property
org.apache.ibatis.reflection.wrapper
可以参考MetaObjectTest来跟踪调试，基本上用到了reflection包下所有的类

8.数据源
org.apache.ibatis.datasource
org.apache.ibatis.datasource.jndi
org.apache.ibatis.datasource.pooled
org.apache.ibatis.datasource.unpooled

9.事务
org.apache.ibatis.transaction
org.apache.ibatis.transaction.jdbc
org.apache.ibatis.transaction.managed

10.会话
org.apache.ibatis.session
org.apache.ibatis.session.defaults

11.jdbc单元测试工具
org.apache.ibatis.jdbc

12.构建
org.apache.ibatis.builder
org.apache.ibatis.builder.annotation
org.apache.ibatis.builder.xml

13.映射
org.apache.ibatis.mapping

14.脚本
org.apache.ibatis.scripting
org.apache.ibatis.scripting.defaults
org.apache.ibatis.scripting.xmltags

15.注解
org.apache.ibatis.annotations

16.绑定
org.apache.ibatis.binding

17.执行器
org.apache.ibatis.executor
org.apache.ibatis.executor.keygen
org.apache.ibatis.executor.loader
org.apache.ibatis.executor.loader.cglib
org.apache.ibatis.executor.loader.javassist
org.apache.ibatis.executor.parameter
org.apache.ibatis.executor.result
org.apache.ibatis.executor.resultset
org.apache.ibatis.executor.statement

18.插件
org.apache.ibatis.plugin


## 技术要点

1.mybatis中的设计模式 
工厂模式SqlSessionFactory/ObjectFactory/MapperProxyFactory
建造模式SqlSessionFactoryBuilder/XMLConfigBuilder/XMLMapperBuilder/XMLStatementBuilder/CacheBuilder,Environment,把建造的步骤分装到一个类里,且运用了fluent API模式。
单例模式LogFactory,这个简单，不许new多个实例
合成模式MixedSqlNode，里面有许多孩子，TextSqlNode,ForEachSqlNode,IfSqlNode....
装饰模式Cache，一个个缓存类通过一个链条串起来
代理模式MapperProxy/ConnectionLogger,用的jdk的动态代理
还有executor.loader包使用了cglib或者javassist达到延迟加载的效果
模板方法模式BaseExecutor，具体方法实现交给子类SimpleExecutor/CachingExecutor做。还有BaseTypeHandler底下有各种子类如IntegerTypeHandler
迭代器模式PropertyTokenizer，可以解析person[0].birthdate.year这样的字符串
适配器模式，logging包统一了各大日志框架的接口


2.mybatis中的拦截器 
有jdk的动态代理(Plugin)， 
cglib/javassist(executor.loader包) 

3.mybatis中的缓存 
代码设计的不错的。采用装饰模式，一个个包装起来，形成一个链，典型的就是SynchronizedCache->LoggingCache->SerializedCache->LruCache->PerpetualCache，通过链起来达到功能增加 
SynchronizedCache 同步缓存，防止多线程问题。核心: 加读写锁，
    ReadWriteLock.readLock().lock()/unlock() 
    ReadWriteLock.writeLock().lock()/unlock()
LoggingCache 日志缓存，添加功能：取缓存时打印命中率
SerializedCache 序列化缓存 用途是先将对象序列化成2进制，再缓存
LruCache 最近最少使用缓存，核心就是覆盖 LinkedHashMap.removeEldestEntry方法,返回true或false告诉 LinkedHashMap要不要删除此最老键值。LinkedHashMap内部其实就是每次访问或者插入一个元素都会把元素放到链表末尾，这样不经常访问的键值肯定就在链表开头啦。
PerpetualCache 永久缓存，一旦存入就一直保持，内部就是一个HashMap,所有方法基本就是直接调用HashMap的方法
FifoCache 先进先出缓存，内部就是一个链表，将链表开头元素（最老）移除
ScheduledCache 定时调度缓存， 目的是每一小时清空一下缓存
SoftCache 软引用缓存，核心是SoftReference
WeakCache 弱引用缓存，核心是WeakReference
TransactionalCache 事务缓存，一次性存入多个缓存，移除多个缓存


4.mybatis中的插件 
XMLConfigBuilder.pluginElement()解析plugins节点，调用Configuration.addInterceptor()，加入到Configuration里的InterceptorChain（拦截器链）。 

这样下次ParameterHandler|ResultSetHandler|StatementHandler|Executor执行前就会调用plugin.invoke方法了,而他又会调用Interceptor.intercept,我们可以在这里实现自己的插件。替换这4个类的功能。核心就是jdk的动态代理。

5.mybatis中的日志 
自己搞了个日志框架，其实就是统一了各大日志框架的接口，适配器模式吧。 
mybatis会按以下顺序依次找有没有这个日志类，找到就用这个日志 
SLF4J
Apache Commons Logging
Log4J2
Log4J
JDK logging


6.mybatis中的OGNL 
foreach元素解析
<foreach item="item" index="index" collection="list" 
    open="(" separator="," close=")"> 
    #{item} 
</foreach> 
其中collection的解析核心是ognl
if元素解析
  <if test="title != null"> 
    AND title like #{title} 
  </if> 
整个test里面的字符串就交给ognl来解析 

